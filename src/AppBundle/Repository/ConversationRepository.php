<?php

namespace AppBundle\Repository;

use AppBundle\AppBundle;
use AppBundle\Entity\Message;
use AppBundle\Entity\User;
use Doctrine\ORM\Query\Expr;
use Doctrine\ORM\Query\Expr\Join;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage;

/**
 * ConversationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConversationRepository extends \Doctrine\ORM\EntityRepository
{
    private $tokenStorage;

    const CHECK_GROUP = 'Admin';

    const WINEMAKER_GROUP = 'Winemaker';

    const USER_GROUP = 'User';

    public function setCurrentUser(TokenStorage $tokenStorage)
    {
        $this->tokenStorage = $tokenStorage;
    }

    public function findOr(User $user, User $relatedUser)
    {
        $queryBuilder = $this->createQueryBuilder('c');

        $query = $queryBuilder
            ->select()
            ->where('(c.user = :user_id and c.relatedUser = :related_id) or (c.user = :related_id and c.relatedUser = :user_id)')
            ->setParameter(':user_id', $user)
            ->setParameter(':related_id', $relatedUser)
            ->getQuery();

        $result = $query->getResult();

        return $result;
    }

    public function findAnd(User $user, User $relatedUser, $relatedFromFront)
    {
        $queryBuilder = $this->createQueryBuilder('c');

        $parameters = [ 'user_id' => $user ];
        // dump($user->getId().' => '.$relatedUser->getId());die;
        if (!is_null($relatedFromFront) && $user->getId() == $relatedFromFront->getId()){
            if ($user->getId() != $relatedUser->getId()) {
                $predicates = 'c.relatedUser != c.user AND c.user = :user_id AND c.relatedUser = :related_id';
                $parameters['related_id'] = $relatedUser;
            }else{
                $predicates = 'c.relatedUser = c.user AND c.user = :user_id';
            }
        }else{
            $predicates = '(c.user = :user_id AND c.relatedUser = :related_id) OR (c.user = :related_id AND c.relatedUser = :user_id)';
            $parameters['related_id'] = $relatedUser;
        }

        $result = $queryBuilder
            ->select()
            ->where($predicates)
            ->setParameters($parameters)
            ->getQuery()
            ->getResult();

        return $result;
    }

    /**
     * Retrieve conversations with different user and related user
     *
     * @param User $user
     * @return mixed
     */
    public function findNotSelf(User $user)
    {
        $queryBuilder = $this->createQueryBuilder('c');

        $result = $queryBuilder
            ->select('c')
            ->innerJoin("AppBundle\Entity\User",'u', 'WITH', 'u.id = c.relatedUser' )
            ->innerJoin("AppBundle\Entity\Group",'g')
            ->where('c.user = :user_id and c.relatedUser != :user_id')
            ->setParameter(':user_id', $user)
            ->andWhere($queryBuilder->expr()->like('g.roles', ':role'))
            ->setParameter('role', '%ROLE_ADMIN%')
            ->andWhere($queryBuilder->expr()->like('g.roles', ':role_super'))
            ->setParameter('role_super', '%ROLE_SUPER_ADMIN%')
            ->getQuery()
            ->getResult();

        return $result;
    }

    /**
     * Retrieve admin's assigned conversations
     *
     * @param User $user
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findAssigned(User $user)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT c.* FROM `chat_conversation` as c 
                INNER JOIN `fos_user` as u ON u.id = (CASE WHEN c.user_id='{$user->getId()}' THEN c.related_id ELSE c.user_id END)
                INNER JOIN `fos_user_group` as ug ON ug.user_id=(CASE WHEN c.user_id='{$user->getId()}' THEN c.related_id ELSE c.user_id END)
                INNER JOIN `fos_group` as g ON ug.group_id=g.id
                WHERE g.roles LIKE '%ROLE_ADMIN%' OR g.roles LIKE '%ROLE_SUPER_ADMIN%'";

        $query = $connection->prepare($sql);
        $query->execute();

        return $query->fetchAll();

    }

    public function findSelfAssign(User $user)
    {
        $queryBuilder = $this->createQueryBuilder('c');

        $predicates = 'c.relatedUser = :user_id OR c.relatedUser = c.user';
        $parameters = [ 'user_id' => $user, 'related_id' => $this->tokenStorage->getToken()->getUser()];

        if (in_array(self::CHECK_GROUP, $user->getGroupNames())) {
            $predicates = '(c.user = :user_id OR c.relatedUser = :user_id) OR c.relatedUser = c.user';
        }

        if (in_array(self::USER_GROUP, $user->getGroupNames())) {
            $predicates = '(c.user != c.relatedUser and ( c.user = :user_id OR c.relatedUser = :user_id))';
        }

        if (in_array(self::WINEMAKER_GROUP, $user->getGroupNames())) {
            if (in_array(self::WINEMAKER_GROUP, $this->tokenStorage->getToken()->getUser()->getGroupNames())) {
                $predicates = '(c.user = c.relatedUser and c.user = :user_id) OR (c.user = :user_id OR c.relatedUser = :user_id)'; // OR ( c.user = :user_id OR c.relatedUser = :user_id)
            }else{
                $predicates = '(c.user = :user_id AND c.relatedUser = :related_id) OR (c.user = :related_id AND c.relatedUser = :user_id)';
            }
        }

        $result = $queryBuilder
            ->select('c, 
            CASE WHEN (c.user = :user_id AND c.relatedUser = :related_id) OR (c.user = :related_id AND c.relatedUser = :user_id) THEN 1 ELSE 0 END AS HIDDEN highSortCondition, 
            CASE WHEN c.user = c.relatedUser THEN 1 ELSE 0 END AS HIDDEN sortCondition')
            ->where($predicates)
            ->setParameters($parameters)
            ->add('orderBy', new Expr\OrderBy('highSortCondition, sortCondition', 'DESC'))
            ->getQuery()
            ->getResult();


        return $result;
    }

    /**
     * Get user conversation considering user group
     *
     * @param User $user
     * @return mixed|null
     */
    public function getMyConversation(User $user)
    {
        $queryBuilder = $this->createQueryBuilder('c');
        $result = null;

        $predicates = 'c.user = :user_id OR c.relatedUser = :user_id';
        $parameters = [ 'user_id' => $user ];

        if (in_array(self::CHECK_GROUP, $user->getGroupNames())) {
            $predicates = '(c.relatedUser = :user_id) OR c.relatedUser = c.user';
        }

        $result = $queryBuilder
            ->select()
            ->where($predicates)
            ->setParameters($parameters)
            ->getQuery()
            ->getResult();

        return $result;

    }

    /**
     * @param User $user - User passed from frontend
     * @param User $relatedUser - Current session user
     * @param User $relatedFromFront - Related user passed from frontend
     *
     * @return mixed|null
     */
    public function getConcreteConversation(User $user, User $relatedUser, User $relatedFromFront)
    {
        $queryBuilder = $this->createQueryBuilder('c');
        $result = null;

        $parameters = [ 'user_id' => $user, 'related_id' => $relatedUser ];
        if ($user->getId()  ==  $relatedFromFront->getId()){
            $predicates = 'c.relatedUser = c.user AND c.user = :user_id';
            $parameters['related_id'] = $relatedUser;
        }else{
            $predicates = '(c.user = :user_id AND c.relatedUser = :related_id) OR (c.user = :related_id AND c.relatedUser = :user_id)';
            $parameters['related_id'] = $relatedUser;
        }

        $result = $queryBuilder
            ->select('c, 
            CASE WHEN (c.user = :user_id AND c.relatedUser = :related_id) OR (c.user = :related_id AND c.relatedUser = :user_id) THEN 1 ELSE 0 END AS HIDDEN highSortCondition, 
            CASE WHEN c.user = c.relatedUser THEN 1 ELSE 0 END AS HIDDEN sortCondition')
            ->where($predicates)
            ->setParameters($parameters)
            ->add('orderBy', new Expr\OrderBy('highSortCondition, sortCondition', 'DESC'))
            ->getQuery()
            ->getResult();

        return $result;

    }

    /**
     * Retrive unred conversation messages
     *
     * @param User $user
     * @return mixed
     */
    public function getConversationWithUnreadMessages(User $user)
    {

        $queryBuilder = $this->createQueryBuilder('c');

        $result = $queryBuilder
            ->select()
            ->innerJoin('AppBundle:Message', 'm', 'WITH', 'c.id = m.conversation')
            ->andWhere('(c.user = c.relatedUser AND c.user = :user_id) OR (c.user = :user_id OR c.relatedUser = :user_id) AND m.isRead = :unread')
            ->setParameters([
                'user_id' => $user,
                'unread' => '0'
            ])
            ->getQuery()
            ->getResult();


        return $result;
    }


}
