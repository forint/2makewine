<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use AppBundle\Entity\WineProduct;
use Doctrine\ORM\NonUniqueResultException;

/**
 * RateCommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RateCommentRepository extends \Doctrine\ORM\EntityRepository
{

    public function getUserRatingMessage(User $user, WineProduct $product)
    {

        $message = null;
        try {
            $message = $this->createQueryBuilder('rc')
                ->andWhere('rc.author = :user')
                ->andWhere('rc.wineProduct = :product')
                ->setParameter('user', $user)
                ->setParameter('product', $product)
                ->getQuery()
                ->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
        }
        return $message;


//        $qb = $this->createQueryBuilder('rc')
//            ->andWhere('rc.author = :user')
//            ->andWhere('rc.wineProduct = :product')
//            ->setParameter('author', $user)
//            ->setParameter('wineProduct', $product)
//            ->getQuery();
//
//        return $qb->execute();


        // to get just one result:
        // return $qb->setMaxResults(1)->getOneOrNullResult();


        /*        $query = $this->getEntityManager()
                    ->createQuery(
                        'SELECT p, c FROM AppBundle:Product p
                JOIN p.category c
                WHERE p.id = :id'
                    )->setParameter('id', $productId);

                try {
                    return $query->getSingleResult();
                } catch (\Doctrine\ORM\NoResultException $exception) {
                    return null;
                }*/


        /*        return $this->createQueryBuilder('p')
                    // p.category refers to the "category" property on product
                    ->innerJoin('p.category', 'c')
                    // selects all the category data to avoid the query
                    ->addSelect('c')
                    ->andWhere('p.id = :id')
                    ->setParameter('id', $productId)
                    ->getQuery()
                    ->getOneOrNullResult();*/


    }
}


