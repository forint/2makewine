<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Conversation;
use AppBundle\Entity\Role;
use AppBundle\Entity\User;
use AppBundle\Entity\Winery;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\ORM\Query;
use PDO;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Finds an entity by its primary key / identifier.
     *
     * @param mixed    $id          The identifier.
     * @param int|null $lockMode    One of the \Doctrine\DBAL\LockMode::* constants
     *                              or NULL if no specific lock mode should be used
     *                              during the search.
     * @param int|null $lockVersion The lock version.
     *
     * @return object|null The entity instance or NULL if the entity can not be found.
     */
    public function find($id, $lockMode = null, $lockVersion = null)
    {
        return $this->_em->find($this->_entityName, $id, $lockMode, $lockVersion);
    }

    /**
     * Get User by Role
     *
     * @param Role $role
     * @param User $user
     *
     * @return mixed
     */
    public function getUserByRole(Role $role, User $user)
    {
        $partAdminQuery = "";
        if ($user && !$user->hasGroup('Super-Administrator') && !$user->hasGroup('Administrator')){
            $partAdminQuery = "INNER JOIN `users_wineries` as `uw` ON u.id = uw.user_id";
        }

        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT u.* FROM `fos_user` as u
                INNER JOIN `fos_user_group` as ug ON ug.user_id = u.id
                INNER JOIN `fos_group` as g ON ug.group_id = g.id
                {$partAdminQuery}
                WHERE g.roles LIKE '%{$role->getName()}%'";

        $query = $connection->prepare($sql);
        $query->execute();

        return $query->fetchAll(PDO::FETCH_CLASS, 'AppBundle\Entity\User');

        /*$query = $this->createQueryBuilder('u');

        $query
            ->innerJoin('AppBundle:Group', 'g')
            ->andWhere($query->expr()->like('g.roles', ':role'))
            ->setParameter('role', '%' . $role->getName() . '%');


        return $query->getQuery()->getResult();*/

    }

    /**
     * Get User by Role
     *
     * @param Role $role
     *
     * @return mixed
     */
    public function getUsersByRole(Role $role)
    {
        $partAdminQuery = "";

        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT u.* FROM `fos_user` as u
                INNER JOIN `fos_user_group` as ug ON ug.user_id = u.id
                INNER JOIN `fos_group` as g ON ug.group_id = g.id
                WHERE g.roles LIKE '%{$role->getName()}%'";

        $query = $connection->prepare($sql);
        $query->execute();

        return $query->fetchAll(PDO::FETCH_CLASS, 'AppBundle\Entity\User');

    }

    public function getUserByWinery(Winery $winery) {

        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT u.* FROM `fos_user` as u
                INNER JOIN `users_wineries` as uw ON uw.user_id = u.id
                INNER JOIN `fos_user_group` as ug ON ug.user_id = u.id
                INNER JOIN `fos_group` as g ON ug.group_id = g.id
                WHERE uw.winery_id = '{$winery->getId()}'";

        $query = $connection->prepare($sql);
        $query->execute();

        return $query->fetchAll(PDO::FETCH_CLASS, 'AppBundle\Entity\User');
    }

    /**
     * @param array $users
     * @return mixed
     */
    public function getRelatedUsers(array $users)
    {
        $queryBuilder = $this->createQueryBuilder('u');

        $result = $queryBuilder
            ->select()
            ->andWhere($queryBuilder->expr()->in('u.id', ':users'))
            ->setParameter(':users', $users)
            ->getQuery()
            ->getResult();

        return $result;
    }

    public function getUsers(User $user)
    {

        $queryBuilder = $this->createQueryBuilder('u');

        $result = $queryBuilder
            ->select()
            ->innerJoin("AppBundle\Entity\Conversation", "c", Join::WITH, "c.user = u.id")
            ->where('c.relatedUser = :user_id')
            ->setParameter(':user_id', $user)
            ->getQuery()
            ->getResult();

        return $result;
    }

    /**
     * Get Self-Conversation Users
     *
     * Uses for detect conversations without available related user
     *
     */
    public function getUserWithUnreadMessage(){

        $queryBuilder = $this->createQueryBuilder('u');

        $result = $queryBuilder
            ->select()
            ->innerJoin("AppBundle\Entity\Conversation", "c", Join::WITH, "c.user = u.id")
            ->where('c.relatedUser = c.user')
            ->getQuery()
            ->getResult();

        return $result;
    }
}
