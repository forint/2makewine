# To get started with security, check out the documentation:
# https://symfony.com/doc/current/security.html
security:
    # strategy can be: none, migrate, invalidate
    session_fixation_strategy:  migrate
    encoders:
        AppBundle\Entity\User:
            algorithm: bcrypt
            cost: 4
        Symfony\Component\Security\Core\User\User:
            algorithm: bcrypt
            cost: 4
#            algorithm: sha512
#            encode_as_base64: true
#            iterations: 10


    # https://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
    providers:
        chain_provider:
            chain:
                providers: [in_memory, user_db]
        in_memory:
            memory:
                users:
                    supreme: { password: $2y$04$h6vdSaLR07sxlYJvZjrRhuGqczV8aqKkG6k0.LKjzUG1RLiFN.dTy, roles: ROLE_SUPER_ADMIN }
        user_db:
            entity: { class: AppBundle\Entity\User, property: email }
#    providers:
#        our_users:
#            entity: { class: AppBundle\Entity\User, property: email }

    role_hierarchy:
        ROLE_SONATA_ADMIN:       ROLE_USER
        ROLE_ADMIN:
            - ROLE_APP_ADMIN_USER_ALL
            - ROLE_APP_ADMIN_STEP_ALL
            - ROLE_APP_ADMIN_MESSAGE_ALL
            - ROLE_APP_ADMIN_CONVERSATION_ALL
            - ROLE_APP_ADMIN_WINE_CONSTRUCTOR_ALL
            - ROLE_SONATA_ADMIN
            - ROLE_APP_ADMIN_VINEYARD_ALL
            - ROLE_APP_ADMIN_FLAVOR_ALL
            - ROLE_APP_ADMIN_WINE_PRODUCT_ALL
            - ROLE_APP_ADMIN_WINERY_ALL
            - ROLE_APP_ADMIN_WINERY_FIELD_ALL
            - ROLE_APP_ADMIN_WINERY_CELLAR_ALL
            - ROLE_APP_ADMIN_RECIPE_ALL
            - ROLE_APP_ADMIN_CONTACT_ALL
            - ROLE_APP_ADMIN_ICON_ALL
            - ROLE_APP_ADMIN_PRODUCTION_RECIPE_ALL
            - ROLE_APP_ADMIN_WINERY_FIELD_ALL
            - ROLE_APP_ADMIN_WINERY_CELLAR_ALL
            - ROLE_APP_ADMIN_FIELD_STEP_ALL
            - ROLE_APP_ADMIN_CELLAR_STEP_ALL
            - ROLE_APP_ADMIN_WINERY_FIELD_STEP_ALL
            - ROLE_APP_ADMIN_WINERY_CELLAR_STEP_ALL
            - ROLE_APP_ADMIN_STEP_DECIDE_ALL
            - ROLE_APP_ADMIN_CELLAR_STEP_DECIDE_ALL
            - ROLE_APP_ADMIN_ROLE_ALL
            - ROLE_APP_ADMIN_GROUP_ALL

#           app.admin.wine_product
            #- ROLE_SONATA_ADMIN_WINE_PRODUCT_ALL
            - ROLE_SONATA_PRODUCT_ADMIN_PRODUCT_ALL
            #sonata.product.admin.product
            - ROLE_SONATA_ORDER_ADMIN_ORDER_ALL
            - ROLE_SONATA_CUSTOMER_ADMIN_CUSTOMER_ALL
            - ROLE_SONATA_CUSTOMER_ADMIN_ADDRESS_ALL
#            - ROLE_APP_ADMIN_CUSTOMER_ADDRESS_ALL
            - ROLE_SONATA_INVOICE_ADMIN_INVOICE_ALL

            # DELIVERY ADMIN #
            - ROLE_SONATA_PRODUCT_ADMIN_DELIVERY_ALL
            - ROLE_APP_ADMIN_PRODUCT_DELIVERY_ALL
            # DELIVERY ADMIN #

            # ORDER ELEMENT ADMIN #
            - ROLE_SONATA_ORDER_ADMIN_ORDER_ELEMENT_ALL
            - ROLE_APP_ADMIN_ORDER_ORDER_ELEMENT_ALL
            # ORDER ELEMENT ADMIN #

        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_SONATA_ADMIN, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        SONATA:
            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT  # if you are not using acl then this line must be uncommented

    access_decision_manager:
            # set access_strategy to consensus for display FOS Profile with Role User, otherwise 403 Access Forbidden
            strategy: consensus
            # set access_strategy to unanimous, else you may have unexpected behaviors
            # strategy: unanimous

#    providers:
#        fos_userbundle:
#            id: fos_user.user_provider.username

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            context: app_context
            stateless: false
            anonymous: ~
            guard:
                authenticators:
                    - app.security.login_form_authenticator
#            access_denied_url: /
            form_login:
                # submit the login form here
                check_path: security_login

                # the user is redirected here when they need to log in
                login_path: security_login

                # if true, forward the user to the login form instead of redirecting
                use_forward: false

                # login success redirecting options (read further below)
                default_target_path: security_logout
                always_use_default_target_path: true
#                target_path_parameter:          _target_path
                use_referer:                    true

                # login failure redirecting options (read further below)
#                failure_path:    /403
#                failure_forward: true
#                failure_path_parameter: _failure_path
#                failure_handler: some.service.id
#                success_handler: some.service.id

                # field names for the username and password fields
                username_parameter: _username
                password_parameter: _password

                # csrf token options
#                csrf_parameter:       _csrf_token
#                csrf_token_id:        authenticate
#                csrf_token_generator: my.csrf_token_generator.id

                # by default, the login form *must* be a POST, not a GET
                #post_only:      true
                #remember_me:    true

                # by default, a session must exist before submitting an authentication request
                # if false, then Request::hasPreviousSession is not called during authentication
                require_previous_session: true

            logout:
                path: /logout
#                target: /login #or a specific public route
                invalidate_session: false # <- do not clear the session
                success_handler: authentication_handler
                handlers: ['sonata.basket.session.factory']

            # activate different ways to authenticate

            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate
            #http_basic: ~

            # https://symfony.com/doc/current/security/form_login_setup.html
            #form_login: ~

    access_control:
        - { path: ^/admin,   roles: [ROLE_SUPER_ADMIN, ROLE_ADMIN, ROLE_NO_ACCESS] }
        - { path: ^/profile, roles: [ROLE_SUPER_ADMIN, ROLE_ADMIN, ROLE_USER] }
        - { path: ^/it/profile, roles: [ROLE_SUPER_ADMIN, ROLE_ADMIN, ROLE_USER] }
        - { path: ^/chat, roles: [ROLE_SUPER_ADMIN, ROLE_ADMIN, ROLE_USER] }
        - { path: ^/it/chat, roles: [ROLE_SUPER_ADMIN, ROLE_ADMIN, ROLE_USER] }